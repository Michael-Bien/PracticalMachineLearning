rm(list=ls())
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
mpg
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ, y=hwy))
ggplot(data=mpg)
library(tidyverse)
ggplot(data=mpg)
nrow(mtcars)
ncol(mtcars)
str(mtcars)
ggplot(data=mpg) +
geom_point(mapping=aes(x=hwy, y=cyl))
ggplot(data=mpg) +
geom_point(mapping=aes(x=class, y=drv))
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ, y=hwy, color=class))
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ, y=hwy, size=class))
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ, y=hwy, alpha=class))
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ, y=hwy, shape=class))
library(swirl)
library("swirl")
install.packages("swirl")
library("swirl")
swirl()
1:20
pi:10
15:1
':'?
?':'
seq(1,20)
seq(0,10, by=5)
seq(0,10, by=.5)
seq(5,10, length=30)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
library(swirl)
swirl()
num_vect <- c(.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >=6
my_char <-c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Michael Bien")
my_name <- c(my_char, "Michael Bien")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep="")
aste(LETTERS, 1:4, sep = "-")
paste(LETTERS, 1:4, sep = "-")
swirl()
library("swirl")
swirl
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5 != 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
INTS
ints
ints > 5
which(ints>7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit
submit()
boring_function('My first function!')
boring_function()
boring_function
swirl()
library(swirl)
swirl()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]})
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("fj")
submit()
submit()
mad_libs("a","b","c")
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <-lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list <-sapply(flags, class)
cls_vect <-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals,length)
sapply(flags, unique)
lappy(unique_vals, function(elem) elem[2])
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
rm(list=ls())
rm(list=ls())
rm(list=ls())
## These functions, combined, will calculate the inverse of a matrix, if it is not already calculated;
## however, if the inverted matrix has already been calculated, it returns the cached matrix, saving time
## makeCacheMatrix returns a list of functions that can set, get, set an inverted matrix, and get an inverted matrix
makeCacheMatrix <- function(x = matrix()) {
Inverted_Matrix <- NULL
set <- function(y) {
x <<- y
Inverted_Matrix <<- NULL
}
get <- function() x     #get returns x
set_Inverted_Matrix <- function(User_Sets_Inverted_Matrix) Inverted_Matrix <<- User_Sets_Inverted_Matrix
get_Inverted_Matrix <- function() Inverted_Matrix
list(set = set, get = get,  #listing out the object
set_Inverted_Matrix = set_Inverted_Matrix,
get_Inverted_Matrix = get_Inverted_Matrix)
}
#cacheSolve checks to see whether an inverted matrix is stored, and otherwise calculates it
cacheSolve <- function(x, ...) {
Inverted_Matrix <- x$get_Inverted_Matrix()
if(!is.null(Inverted_Matrix)) {
message("getting cached data")
return(Inverted_Matrix)
}
data <- x$get()
Inverted_Matrix <- solve(data, ...)
x$set_Inverted_Matrix(Inverted_Matrix)
Inverted_Matrix
}
aMatrix <- makeCacheMatrix(matrix(c(4,2,7,6), nrow=2, ncol=2))
solve(matrix(1:9, nrow=3, ncol=3))
aMatrix$get()               # retrieve the value of x
aMatrix <- makeCacheMatrix(matrix(c(4,2,7,6), nrow=2, ncol=2))
aMatrix$get()               # retrieve the value of x
aMatrix$get_Inverted_Matrix()           # retrieve the value of m, which should be NULL
cacheSolve(aMatrix)          # notice mean calculated is mean of 30:50, not 1:10
aMatrix$get_Inverted_Matrix()           # retrieve it directly, now that it has been cached
rm(list=ls())
#Course Project -- Regression Models -- Sandbox code
library(mtcars)
#Course Project -- Regression Models -- Sandbox code
data(mtcars)
str(mtcars)
# recode automatic and manual as a factor
mtcars$transmission <- ifelse(mtcars$am == 0, "automatic", "manual")
#crosstable to confirm
with(mtcars, table(am, transmission))
# Exploratory data analyses
library(ggplot2)
ggplot(data=mtcars, aes(x=transmission, y=mpg)) +
geom_boxplot()
ggplot(data=mtcars, aes(x=transmission, y=mpg)) +
geom_boxplot()+
facet_wrap(~cyl)
ggplot(data=mtcars, aes(x=transmission, y=mpg)) +
geom_boxplot()+
facet_wrap(~wt)
ggplot(data=mtcars, aes(x=transmission, y=mpg)) +
geom_boxplot()+
facet_wrap(~cyl)
#cut the weight variable
summary(mtcars$wt)
with(mtcars, weight_group <- cut(wt, 4))
summary(mtcars$weight_group)
library(hmisc)
install.packages("hmisc")
library(hmisc)
install.packages("Hmisc")
library(Hmisc)
with(mtcars, weight_group <- cut(wt, 4))
summary(mtcars$weight_group)
?cut
str(mtcars)
hist(mtcars$wt)
with(mtcars, weight_group <- cut(wt, 4))
summary(mtcars$weight_group)
mtcars$weight_group <- cut(mtcars$wt, 4))
mtcars$weight_group <- cut(mtcars$wt, 4)
summary(mtcars$weight_group)
mtcars$weight_group <- cut(mtcars$wt, 10)
summary(mtcars$weight_group)
mtcars$weight_group <- cut(mtcars$wt, 6)
summary(mtcars$weight_group)
ggplot(data=mtcars, aes(x=transmission, y=mpg)) +
geom_boxplot()+
facet_wrap(~weight_group)
View(mtcars)
mtcars$weight_group <- cut(mtcars$wt, 4)
ggplot(data=mtcars, aes(x=transmission, y=mpg)) +
geom_boxplot()+
facet_wrap(~weight_group)
mtcars$weight_group <- cut(mtcars$wt, 3)
summary(mtcars$weight_group)
ggplot(data=mtcars, aes(x=transmission, y=mpg)) +
geom_boxplot()+
facet_wrap(~weight_group)
ggplot(data=mtcars, aes(x=transmission, y=mpg)) +
geom_boxplot()+
geom_jitter() +
facet_wrap(~weight_group)
# model fit
model <- lm(mpg~., data=mtcars)
summary(model)$coefficients
str(mtcars)
# recode automatic and manual as a factor
mtcars$transmission <- as.factor(ifelse(mtcars$am == 0, "automatic", "manual"))
#crosstable to confirm
with(mtcars, table(am, transmission))
ggplot(data=mtcars, aes(x=transmission, y=mpg)) +
geom_boxplot()
ggplot(data=mtcars, aes(x=transmission, y=mpg)) +
geom_boxplot() +
geom_jitter()
ggplot(data=mtcars, aes(x=transmission, y=mpg)) +
geom_boxplot()+
facet_wrap(~cyl)
ggplot(data=mtcars, aes(x=transmission, y=mpg)) +
geom_boxplot()+
facet_wrap(~cyl)+
geom_jitter()
str(mtcars)
# model fit
mtcars2 <- mtcars[,-c("am", "weight_group")]
model <- lm(mpg~., data=mtcars2)
# model fit
mtcars2 <- mtcars[,-c("am", "weight_group")]
# model fit
mtcars2 <- mtcars[,-c("am", "weight_group")]
# model fit
mtcars2 <- mtcars[,-"am"]
# model fit
mtcars2 <- mtcars[,-"am"]
str(mtcars)
# model fit
vars_to_drop <- c("am","weight_group")
mtcars2 <- mtcars[,-vars_to_drop]
# model fit
mtcars2 <- mtcars[,-c(9,13)]
str(mtcars2)
str(mtcars)
# model fit
mtcars2 <- mtcars[,-c(8,9,13)]
str(mtcars2)
summary(model)$coefficients
# model fit
mtcars2 <- mtcars[,-c(8,9,13)]
str(mtcars2)
model <- lm(mpg~., data=mtcars2)
summary(model)$coefficients
model <- lm(mpg ~ transmission, mtcars)
summary(model)$coefficients
ggplot(data=mtcars, aes(x=transmission, y=mpg)) +
geom_boxplot() +
geom_jitter()
ggplot(data=mtcars, aes(x=transmission, y=mpg)) +
geom_boxplot()+
facet_wrap(~cyl)+
geom_jitter()
ggplot(data=mtcars, aes(x=transmission, y=mpg)) +
geom_boxplot()+
geom_jitter() +
facet_wrap(~weight_group)
#this view says manual is 2.45 higher!
model <- lm(mpg~., data=mtcars2)
summary(model)$coefficients
vif(model)
VIF(model)
library(regclass)
install.packages("regclass")
library(regclass)
VIF(model)
names(mtcars2)
str(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
# model fit
mtcars2 <- mtcars[,-c(8,9,13)]
#this view says manual is 2.45 higher!
model <- lm(mpg~., data=mtcars2)
summary(model)$coefficients
VIF(model)
model <- lm(mpg ~ transmission, mtcars2)
summary(model)$coefficients
model <- lm(mpg ~ transmission+cyl, mtcars2)
summary(model)$coefficients
model <- lm(mpg ~ transmission+hp, mtcars2)
summary(model)$coefficients
model <- lm(mpg ~ transmission+cyl, mtcars2)
names(mtcars2)
model <- lm(mpg ~ transmission+wt, mtcars2)
summary(model)$coefficients
#slightly negative when we take into account weight
model <- lm(mpg ~ transmission+wt+cyl, mtcars2)
summary(model)$coefficients
#slightly negative when we take into account weight
model <- lm(mpg ~ wt+cyl*transmission, mtcars2)
summary(model)$coefficients
summary(model)$coefficients
rm(list=ls())
library(ggplot2)
rm(list=ls())
rm(list = ls())
shiny::runApp('Mike/Data Products/mtcars_product')
runApp('Mike/Data Products/mtcars_product')
head(mtcars)
range(mtcars$hp)
range(mtcars$wt)
runApp('Mike/Data Products/mtcars_product')
runApp('Mike/Data Products/mtcars_product')
runApp('Mike/Data Products/mtcars_product')
runApp('Mike/Data Products/mtcars_product')
runApp('Mike/Data Products/mtcars_product')
runApp('Mike/Data Products/mtcars_product')
runApp('Mike/Data Products/mtcars_product')
runApp('Mike/Data Products/mtcars_product')
runApp('Mike/Data Products/mtcars_product')
runApp('Mike/Data Products/mtcars_product')
runApp('Mike/Data Products/mtcars_product')
runApp('Mike/Data Products/mtcars_product')
runApp('Mike/Data Products/mtcars_product')
runApp('Mike/Data Products/mtcars_product')
runApp('Mike/Data Products/mtcars_product')
runApp('Mike/Data Products/mtcars_product')
getwd()
setwd("C:\Users\Natal\OneDrive\Documents\Mike\PML")
setwd("C:\\Users\\Natal\\OneDrive\\Documents\\Mike\\PML")
